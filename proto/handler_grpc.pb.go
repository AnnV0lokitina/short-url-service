// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/handler.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// URLsClient is the client API for URLs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type URLsClient interface {
	SetURL(ctx context.Context, in *SetAddrRequest, opts ...grpc.CallOption) (*SetAddrResponse, error)
	GetURL(ctx context.Context, in *GetAddrRequest, opts ...grpc.CallOption) (*GetAddrResponse, error)
	GetUserURLList(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*AddrFullInfoListResponse, error)
	SetShortenBatch(ctx context.Context, in *AddrListRequest, opts ...grpc.CallOption) (*AddrListResponse, error)
	DeleteBatch(ctx context.Context, in *DeleteBatchRequest, opts ...grpc.CallOption) (*TextResponse, error)
	GetStats(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatsResponse, error)
}

type uRLsClient struct {
	cc grpc.ClientConnInterface
}

func NewURLsClient(cc grpc.ClientConnInterface) URLsClient {
	return &uRLsClient{cc}
}

func (c *uRLsClient) SetURL(ctx context.Context, in *SetAddrRequest, opts ...grpc.CallOption) (*SetAddrResponse, error) {
	out := new(SetAddrResponse)
	err := c.cc.Invoke(ctx, "/proto.URLs/SetURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLsClient) GetURL(ctx context.Context, in *GetAddrRequest, opts ...grpc.CallOption) (*GetAddrResponse, error) {
	out := new(GetAddrResponse)
	err := c.cc.Invoke(ctx, "/proto.URLs/GetURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLsClient) GetUserURLList(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*AddrFullInfoListResponse, error) {
	out := new(AddrFullInfoListResponse)
	err := c.cc.Invoke(ctx, "/proto.URLs/GetUserURLList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLsClient) SetShortenBatch(ctx context.Context, in *AddrListRequest, opts ...grpc.CallOption) (*AddrListResponse, error) {
	out := new(AddrListResponse)
	err := c.cc.Invoke(ctx, "/proto.URLs/SetShortenBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLsClient) DeleteBatch(ctx context.Context, in *DeleteBatchRequest, opts ...grpc.CallOption) (*TextResponse, error) {
	out := new(TextResponse)
	err := c.cc.Invoke(ctx, "/proto.URLs/DeleteBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLsClient) GetStats(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatsResponse, error) {
	out := new(StatsResponse)
	err := c.cc.Invoke(ctx, "/proto.URLs/GetStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// URLsServer is the server API for URLs service.
// All implementations must embed UnimplementedURLsServer
// for forward compatibility
type URLsServer interface {
	SetURL(context.Context, *SetAddrRequest) (*SetAddrResponse, error)
	GetURL(context.Context, *GetAddrRequest) (*GetAddrResponse, error)
	GetUserURLList(context.Context, *UserInfo) (*AddrFullInfoListResponse, error)
	SetShortenBatch(context.Context, *AddrListRequest) (*AddrListResponse, error)
	DeleteBatch(context.Context, *DeleteBatchRequest) (*TextResponse, error)
	GetStats(context.Context, *StatRequest) (*StatsResponse, error)
	mustEmbedUnimplementedURLsServer()
}

// UnimplementedURLsServer must be embedded to have forward compatible implementations.
type UnimplementedURLsServer struct {
}

func (UnimplementedURLsServer) SetURL(context.Context, *SetAddrRequest) (*SetAddrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetURL not implemented")
}
func (UnimplementedURLsServer) GetURL(context.Context, *GetAddrRequest) (*GetAddrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetURL not implemented")
}
func (UnimplementedURLsServer) GetUserURLList(context.Context, *UserInfo) (*AddrFullInfoListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserURLList not implemented")
}
func (UnimplementedURLsServer) SetShortenBatch(context.Context, *AddrListRequest) (*AddrListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetShortenBatch not implemented")
}
func (UnimplementedURLsServer) DeleteBatch(context.Context, *DeleteBatchRequest) (*TextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBatch not implemented")
}
func (UnimplementedURLsServer) GetStats(context.Context, *StatRequest) (*StatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedURLsServer) mustEmbedUnimplementedURLsServer() {}

// UnsafeURLsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to URLsServer will
// result in compilation errors.
type UnsafeURLsServer interface {
	mustEmbedUnimplementedURLsServer()
}

func RegisterURLsServer(s grpc.ServiceRegistrar, srv URLsServer) {
	s.RegisterService(&URLs_ServiceDesc, srv)
}

func _URLs_SetURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLsServer).SetURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.URLs/SetURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLsServer).SetURL(ctx, req.(*SetAddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _URLs_GetURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLsServer).GetURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.URLs/GetURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLsServer).GetURL(ctx, req.(*GetAddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _URLs_GetUserURLList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLsServer).GetUserURLList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.URLs/GetUserURLList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLsServer).GetUserURLList(ctx, req.(*UserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _URLs_SetShortenBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddrListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLsServer).SetShortenBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.URLs/SetShortenBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLsServer).SetShortenBatch(ctx, req.(*AddrListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _URLs_DeleteBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLsServer).DeleteBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.URLs/DeleteBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLsServer).DeleteBatch(ctx, req.(*DeleteBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _URLs_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLsServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.URLs/GetStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLsServer).GetStats(ctx, req.(*StatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// URLs_ServiceDesc is the grpc.ServiceDesc for URLs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var URLs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.URLs",
	HandlerType: (*URLsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetURL",
			Handler:    _URLs_SetURL_Handler,
		},
		{
			MethodName: "GetURL",
			Handler:    _URLs_GetURL_Handler,
		},
		{
			MethodName: "GetUserURLList",
			Handler:    _URLs_GetUserURLList_Handler,
		},
		{
			MethodName: "SetShortenBatch",
			Handler:    _URLs_SetShortenBatch_Handler,
		},
		{
			MethodName: "DeleteBatch",
			Handler:    _URLs_DeleteBatch_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _URLs_GetStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/handler.proto",
}
